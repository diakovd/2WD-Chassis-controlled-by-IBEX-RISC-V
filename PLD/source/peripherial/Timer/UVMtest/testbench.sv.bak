//-------------------------------------------------------------------------
//				www.verificationguide.com   testbench.sv
//-------------------------------------------------------------------------
//---------------------------------------------------------------
//including interfcae and testcase files
`include "uvm_macros.svh"
import uvm_pkg::*;
import ahb3lite_pkg::*;
 
`include "tm_interface.sv"
`include "tm_base_test.sv"
`include "tm_wr_rd_test.sv"
//---------------------------------------------------------------
`define SIM

module tbench_top;


  //---------------------------------------
  //clock and reset signal declaration
  //---------------------------------------
  bit clk;
  bit reset;
  
  //---------------------------------------
  //clock generation
  //---------------------------------------
  always #5 clk = ~clk;
  
  //---------------------------------------
  //reset Generation
  //---------------------------------------
  initial begin
    reset = 1;
    #5 reset =0;
  end
  
  //---------------------------------------
  //interface instance
  //---------------------------------------
  ahb3lite_bus bus_if(clk,reset);
  
  //---------------------------------------
  //DUT instance
  //---------------------------------------
  // memory DUT (
    // .clk(intf.clk),
    // .reset(intf.reset),
    // .addr(intf.addr),
    // .wr_en(intf.wr_en),
    // .rd_en(intf.rd_en),
    // .wdata(intf.wdata),
    // .rdata(intf.rdata)
   // );
  
  Timer DUT
 #(
   .TM_SIZE(32), //conter bit wigh, max = 32 bit   
   .PWM_SIZE(1), //number of PWM output   
   .HADDR_SIZE(8),
   .HDATA_SIZE(32) 	
 )
 (
	.CPUbus(bus_if.slave),

	.Evnt0(),
	.Evnt1(),
	.Evnt2(),
	.PWM(),
	.Int()
 );
  
  //---------------------------------------
  //passing the interface handle to lower heirarchy using set method 
  //and enabling the wave dump
  //---------------------------------------
  initial begin 
    uvm_config_db#(virtual tm_ahb3lite_bus)::set(uvm_root::get(),"*","vif",bus_if);
    //enable wave dump
    $dumpfile("dump.vcd"); 
    $dumpvars;
  end
  
  //---------------------------------------
  //calling test
  //---------------------------------------
  initial begin 
    run_test();
  end
  
endmodule